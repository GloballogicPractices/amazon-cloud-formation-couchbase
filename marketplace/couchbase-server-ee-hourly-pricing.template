{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "AWS Deployment for Couchbase Enterprise -- AWSMP::00f6801d-49bf-41ee-aa95-01053fcbab2f::ccecd71e-2b60-4f2a-9d6a-04fd10817678",
  "Parameters": {
    "ServerInstanceCount": {
      "Description": "Number of Couchbase Server Nodes",
      "Type": "Number",
      "Default": 4
    },
    "ServerDiskSize": {
      "Description": "Size in GB of the EBS gp2 volume on each Couchbase node",
      "Type": "Number",
      "Default": 100
    },
    "InstanceType": {
      "Description": "Instance type for Couchbase Nodes",
      "Type": "String",
      "Default": "m4.xlarge",
  	  "AllowedValues": [
          "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge",
          "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "m4.16xlarge",
          "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge",
          "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge",
          "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge",
          "i3.large", "i3.xlarge", "i3.2xlarge", "i3.4xlarge", "i3.8xlarge", "i3.16xlarge",
          "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge",
          "r4.large", "r4.xlarge", "r4.2xlarge", "r4.4xlarge", "r4.8xlarge", "r4.16xlarge",
          "x1.16xlarge", "x1.32xlarge"
        ]
    },
    "Username": {
      "Description": "Username for Couchbase administrator",
      "Type": "String"
    },
    "Password": {
      "Description": "Password for Couchbase administrator",
      "Type": "String",
      "NoEcho": true
    },
    "KeyName": {
      "Description": "Name of an existing EC2 KeyPair",
      "Type": "AWS::EC2::KeyPair::KeyName"
    },
    "SSHCIDR": {
      "Description": "SSH CIDR",
      "Type": "String",
      "MinLength": 9,
      "MaxLength": 18,
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid CIDR range of the form x.x.x.x/x."
    }
  },
  "Mappings": {
    "CouchbaseServer": {
      "us-east-1": { "BYOL": "ami-e14d569a", "HourlyPricing": "ami-e8405b93", "None": "ami-a4c7edb2" },
      "us-east-2": { "BYOL": "ami-c83f1dad", "HourlyPricing": "ami-42391b27", "None": "ami-8a7859ef" },
      "us-west-1": { "BYOL": "ami-0ba4936b", "HourlyPricing": "ami-03a69163", "None": "ami-327f5352" },
      "us-west-2": { "BYOL": "ami-0426d77c", "HourlyPricing": "ami-0a2bda72", "None": "ami-6df1e514" },
      "ca-central-1": { "BYOL": "ami-12d86176", "HourlyPricing": "ami-97e75ef3", "None": "ami-a7aa15c3" },
      "eu-central-1": { "BYOL": "ami-17ae1978", "HourlyPricing": "ami-d5a116ba", "None": "ami-82be18ed" },
      "eu-west-1": { "BYOL": "ami-da6faea3", "HourlyPricing": "ami-ab6cadd2", "None": "ami-d7b9a2b1" },
      "eu-west-2": { "BYOL": "ami-8a7f6cee", "HourlyPricing": "ami-e27f6c86", "None": "ami-ed100689" },
      "ap-southeast-1": { "BYOL": "ami-31a1ca52", "HourlyPricing": "ami-53a3c830", "None": "ami-77af2014" },
      "ap-southeast-2": { "BYOL": "ami-86ad4ae4", "HourlyPricing": "ami-3baa4d59", "None": "ami-10918173" },
      "ap-south-1": { "BYOL": "ami-85aee9ea ", "HourlyPricing": "ami-b0a1e6df", "None": "ami-47205e28" },
      "ap-northeast-1": { "BYOL": "ami-315c9c57", "HourlyPricing": "ami-905f9ff6", "None": "ami-3bd3c45c" },
      "ap-northeast-2": { "BYOL": "ami-6bed3605", "HourlyPricing": "ami-6ded3603", "None": "ami-e21cc38c" },
      "sa-east-1": { "BYOL": "ami-ad9be9c1", "HourlyPricing": "ami-e29be98e", "None": "ami-87dab1eb" }
    }
  },
  "Resources": {
    "ServerAutoScalingGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "AvailabilityZones": { "Fn::GetAZs": "" },
        "LaunchConfigurationName": { "Ref": "ServerLaunchConfiguration" },
        "MinSize": 1,
        "MaxSize": 100,
        "DesiredCapacity": { "Ref": "ServerInstanceCount" }
      }
    },
    "ServerLaunchConfiguration": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "ImageId": { "Fn::FindInMap": [ "CouchbaseServer", { "Ref": "AWS::Region" }, "HourlyPricing" ] },
        "InstanceType": { "Ref": "InstanceType" },
        "SecurityGroups": [ { "Ref": "CouchbaseSecurityGroup" } ],
        "KeyName": { "Ref": "KeyName" },
        "EbsOptimized": true,
        "IamInstanceProfile": { "Ref": "CouchbaseInstanceProfile" },
        "BlockDeviceMappings":
        [
          {
            "DeviceName" : "/dev/xvda",
            "Ebs" : { "DeleteOnTermination" : true }
          },
          {
            "DeviceName" : "/dev/sdk",
            "Ebs" : {
              "VolumeSize": { "Ref": "ServerDiskSize" },
              "VolumeType": "gp2"
            }
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [ "",
              [
                "#!/bin/bash\n",
                "echo 'Running startup script...'\n",
                "adminUsername=", { "Ref": "Username" }, "\n",
                "adminPassword=", { "Ref": "Password" }, "\n",
                "stackName=", { "Ref": "AWS::StackName" }, "\n",

                "#######################################################\n",
                "############ Turn Off Transparent Hugepages ###########\n",
                "#######################################################\n",
                "echo \"Turning off transparent hugepages...\"\n",

                "echo \"#!/bin/bash\n",
                "### BEGIN INIT INFO\n",
                "# Provides:          disable-thp\n",
                "# Required-Start:    $local_fs\n",
                "# Required-Stop:\n",
                "# X-Start-Before:    couchbase-server\n",
                "# Default-Start:     2 3 4 5\n",
                "# Default-Stop:      0 1 6\n",
                "# Short-Description: Disable THP\n",
                "# Description:       disables Transparent Huge Pages (THP) on boot\n",
                "### END INIT INFO\n",

                "echo 'never' > /sys/kernel/mm/transparent_hugepage/enabled\n",
                "echo 'never' > /sys/kernel/mm/transparent_hugepage/defrag\n",
                "\" > /etc/init.d/disable-thp\n",
                "chmod 755 /etc/init.d/disable-thp\n",
                "service disable-thp start\n",
                "chkconfig disable-thp on\n",

                "#######################################################\n",
                "################# Set Swappiness to 0 #################\n",
                "#######################################################\n",
                "echo \"Setting swappiness to 0...\"\n",

                "sysctl vm.swappiness=0\n",
                "echo \"\n",
                "# Required for Couchbase\n",
                "vm.swappiness = 0\" >> /etc/sysctl.conf\n",

                "#######################################################\n",
                "##################### Format Disk #####################\n",
                "#######################################################\n",
                "echo \"Formatting disk...\"\n",

                "DEVICE=/dev/sdk\n",
                "MOUNTPOINT=/mnt/datadisk\n",

                "echo \"Creating the filesystem.\"\n",
                "mkfs -t ext4 ${DEVICE}\n",

                "echo \"Updating fstab\"\n",
                "LINE=\"${DEVICE}\t${MOUNTPOINT}\text4\tdefaults,nofail\t0\t2\"\n",
                "echo -e ${LINE} >> /etc/fstab\n",

                "echo \"Mounting the disk\"\n",
                "mkdir $MOUNTPOINT\n",
                "mount -a\n",

                "echo \"Changing permissions\"\n",
                "chown couchbase $MOUNTPOINT\n",
                "chgrp couchbase $MOUNTPOINT\n",

                "#######################################################\n",
                "################# Configure Couchbase #################\n",
                "#######################################################\n",
                "echo \"Configuring Couchbase...\"\n",

                "yum -y install jq\n",

                "region=$(curl -s http://169.254.169.254/latest/dynamic/instance-identity/document \\\n",
                "  | jq '.region'  \\\n",
                "  | sed 's/^\"\\(.*\\)\"$/\\1/' )\n",

                "instanceID=$(curl -s http://169.254.169.254/latest/dynamic/instance-identity/document \\\n",
                "  | jq '.instanceId' \\\n",
                "  | sed 's/^\"\\(.*\\)\"$/\\1/' )\n",

                "rallyAutoscalingGroup=$(aws ec2 describe-instances \\\n",
                "  --region ${region} \\\n",
                "  --instance-ids ${instanceID} \\\n",
                "  | jq '.Reservations[0]|.Instances[0]|.Tags[] | select( .Key == \"aws:autoscaling:groupName\") | .Value' \\\n",
                "  | sed 's/^\"\\(.*\\)\"$/\\1/' )\n",

                "rallyAutoscalingGroupInstanceIDs=$(aws autoscaling describe-auto-scaling-groups \\\n",
                "  --region ${region} \\\n",
                "  --query 'AutoScalingGroups[*].Instances[*].InstanceId' \\\n",
                "  --auto-scaling-group-name ${rallyAutoscalingGroup} \\\n",
                "  | grep \"i-\" | sed 's/ //g' | sed 's/\"//g' |sed 's/,//g' | sort)\n",

                "rallyInstanceID=`echo ${rallyAutoscalingGroupInstanceIDs} | cut -d \" \" -f1`\n",

                "# Check if any IDs are already the rally point and overwrite rallyInstanceID if so\n",
                "rallyAutoscalingGroupInstanceIDsArray=(`echo $rallyAutoscalingGroupInstanceIDs`)\n",
                "for i in ${rallyAutoscalingGroupInstanceIDsArray[@]}; do\n",
                "  tags=`aws ec2 describe-tags --region ${region}  --filter \"Name=tag:Name,Values=*Rally\" \"Name=resource-id,Values=$instanceID\"`\n",
                "  tags=`echo $tags | jq '.Tags'`\n",
                "  if [ \"$tags\" != \"[]\" ]\n",
                "  then\n",
                "    rallyInstanceID=$i\n",
                "  fi\n",
                "done\n",

                "rallyPublicDNS=$(aws ec2 describe-instances \\\n",
                "    --region ${region} \\\n",
                "    --query  'Reservations[0].Instances[0].NetworkInterfaces[0].Association.PublicDnsName' \\\n",
                "    --instance-ids ${rallyInstanceID} \\\n",
                "    --output text)\n",

                "nodePublicDNS=`curl http://169.254.169.254/latest/meta-data/public-hostname`\n",

                "echo \"Using the settings:\"\n",
                "echo adminUsername \\'$adminUsername\\'\n",
                "echo adminPassword \\'$adminPassword\\'\n",
                "echo stackName \\'$stackName\\'\n",
                "echo rallyPublicDNS \\'$rallyPublicDNS\\'\n",
                "echo region \\'$region\\'\n",
                "echo instanceID \\'$instanceID\\'\n",
                "echo nodePublicDNS \\'$nodePublicDNS\\'\n",

                "if [[ ${rallyPublicDNS} == ${nodePublicDNS} ]]\n",
                "then\n",
                "  aws ec2 create-tags \\\n",
                "    --region ${region} \\\n",
                "    --resources ${instanceID} \\\n",
                "    --tags Key=Name,Value=${stackName}-ServerRally\n",
                "else\n",
                "  aws ec2 create-tags \\\n",
                "    --region ${region} \\\n",
                "    --resources ${instanceID} \\\n",
                "    --tags Key=Name,Value=${stackName}-Server\n",
                "fi\n",

                "cd /opt/couchbase/bin/\n",

                "echo \"Running couchbase-cli node-init\"\n",
                "output=\"\"\n",
                "while [[ ! $output =~ \"SUCCESS\" ]]\n",
                "do\n",
                "  output=`./couchbase-cli node-init \\\n",
                "    --cluster=$nodePublicDNS \\\n",
                "    --node-init-hostname=$nodePublicDNS \\\n",
                "    --node-init-data-path=/mnt/datadisk/data \\\n",
                "    --node-init-index-path=/mnt/datadisk/index \\\n",
                "    --user=$adminUsername \\\n",
                "    --pass=$adminPassword`\n",
                "  echo node-init output \\'$output\\'\n",
                "  sleep 10\n",
                "done\n",

                "if [[ $rallyPublicDNS == $nodePublicDNS ]]\n",
                "then\n",
                "  totalRAM=$(grep MemTotal /proc/meminfo | awk '{print $2}')\n",
                "  dataRAM=$((50 * $totalRAM / 100000))\n",
                "  indexRAM=$((25 * $totalRAM / 100000))\n",

                "  echo \"Running couchbase-cli cluster-init\"\n",
                "  ./couchbase-cli cluster-init \\\n",
                "    --cluster=$nodePublicDNS \\\n",
                "    --cluster-username=$adminUsername \\\n",
                "    --cluster-password=$adminPassword \\\n",
                "    --cluster-ramsize=$dataRAM \\\n",
                "    --cluster-index-ramsize=$indexRAM \\\n",
                "    --services=data,index,query,fts\n",
                "else\n",
                "  echo \"Running couchbase-cli server-add\"\n",
                "  output=\"\"\n",
                "  while [[ $output != \"Server $nodePublicDNS:8091 added\" && ! $output =~ \"Node is already part of cluster.\" ]]\n",
                "  do\n",
                "    output=`./couchbase-cli server-add \\\n",
                "      --cluster=$rallyPublicDNS \\\n",
                "      --user=$adminUsername \\\n",
                "      --pass=$adminPassword \\\n",
                "      --server-add=$nodePublicDNS \\\n",
                "      --server-add-username=$adminUsername \\\n",
                "      --server-add-password=$adminPassword \\\n",
                "      --services=data,index,query,fts`\n",
                "    echo server-add output \\'$output\\'\n",
                "    sleep 10\n",
                "  done\n",

                "  echo \"Running couchbase-cli rebalance\"\n",
                "  output=\"\"\n",
                "  while [[ ! $output =~ \"SUCCESS\" ]]\n",
                "  do\n",
                "    output=`./couchbase-cli rebalance \\\n",
                "    --cluster=$rallyPublicDNS \\\n",
                "    --user=$adminUsername \\\n",
                "    --pass=$adminPassword`\n",
                "    echo rebalance output \\'$output\\'\n",
                "    sleep 10\n",
                "  done\n",
                "fi\n"
              ]
            ]
          }
        }
      }
    },
    "CouchbaseInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {"Roles": [{"Ref": "CouchbaseRole"}]}
    },
    "CouchbaseRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {"Service": ["ec2.amazonaws.com"]},
              "Action": ["sts:AssumeRole"]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "CouchbasePolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "ec2:CreateTags",
                    "ec2:DescribeTags",
                    "ec2:DescribeInstances",
                    "autoscaling:DescribeAutoScalingGroups"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "CouchbaseSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription" : "Enable SSH and Couchbase Ports",
        "SecurityGroupIngress": [
          { "IpProtocol": "tcp", "FromPort": 22, "ToPort": 22, "CidrIp": { "Ref": "SSHCIDR" } },
          { "IpProtocol": "tcp", "FromPort": 4369, "ToPort": 4369, "CidrIp": "0.0.0.0/0" },
          { "IpProtocol": "tcp", "FromPort": 4984, "ToPort": 4985, "CidrIp": "0.0.0.0/0" },
          { "IpProtocol": "tcp", "FromPort": 8091, "ToPort": 8094, "CidrIp": "0.0.0.0/0" },
          { "IpProtocol": "tcp", "FromPort": 9100, "ToPort": 9105, "CidrIp": "0.0.0.0/0" },
          { "IpProtocol": "tcp", "FromPort": 9998, "ToPort": 9999, "CidrIp": "0.0.0.0/0" },
          { "IpProtocol": "tcp", "FromPort": 11207, "ToPort": 11215, "CidrIp": "0.0.0.0/0" },
          { "IpProtocol": "tcp", "FromPort": 18091, "ToPort": 18093, "CidrIp": "0.0.0.0/0" },
          { "IpProtocol": "tcp", "FromPort": 21100, "ToPort": 21299, "CidrIp": "0.0.0.0/0" }
        ]
      }
    }
  }
}
