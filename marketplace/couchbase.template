{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "AWS Deployment for Couchbase Enterprise -- AWSMP::00f6801d-49bf-41ee-aa95-01053fcbab2f::07eb1db2-a04e-47b3-b31b-5bd389e38d5a",
  "Parameters": {
    "Username": {
      "Description": "Username for Couchbase administrator",
      "Type": "String"
    },
    "Password": {
      "Description": "Password for Couchbase administrator",
      "Type": "String",
      "NoEcho": true
    },
    "KeyName": {
      "Description": "Name of an existing EC2 KeyPair",
      "Type": "AWS::EC2::KeyPair::KeyName"
    },
    "InstanceType": {
      "Description": "Instance type for Couchbase Nodes",
      "Type": "String",
      "Default": "m4.xlarge",
	  "AllowedValues": [
            "m3.medium",
            "m3.large",
            "m3.xlarge",
            "m3.2xlarge",
            "c3.large",
            "c3.xlarge",
            "c3.2xlarge",
            "c3.4xlarge",
            "c3.8xlarge",
            "i2.xlarge",
            "i2.2xlarge",
            "i2.4xlarge",
            "i2.8xlarge",
            "r3.large",
            "r3.xlarge",
            "r3.2xlarge",
            "r3.4xlarge",
            "r3.8xlarge",
            "c4.large",
            "c4.xlarge",
            "c4.2xlarge",
            "c4.4xlarge",
            "c4.8xlarge",
            "m4.large",
            "m4.xlarge",
            "m4.2xlarge",
            "m4.4xlarge",
            "m4.10xlarge",
            "x1.16xlarge",
            "x1.32xlarge",
            "m4.16xlarge",
            "r4.large",
            "r4.xlarge",
            "r4.2xlarge",
            "r4.4xlarge",
            "r4.8xlarge",
            "r4.16xlarge",
            "i3.xlarge",
            "i3.2xlarge",
            "i3.4xlarge",
            "i3.8xlarge",
            "i3.16xlarge",
            "i3.large"
      ],
    },
    "InstanceCount": {
      "Description": "Number of Couchbase Nodes",
      "Type": "Number",
      "Default": 4
    },
    "DiskSize": {
      "Description": "Size in GB of the EBS gp2 volume on each Couchbase node",
      "Type": "Number",
      "Default": 100
    },
    "SSHCIDR": {
      "Description": "SSH CIDR",
      "Type": "String",
      "MinLength": 9,
      "MaxLength": 18,
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid CIDR range of the form x.x.x.x/x.",
      "Default": "0.0.0.0/0"
    }
  },
  "Mappings": {
    "CouchbaseServerAMI": {
      "us-east-1": { "AMI": "ami-d71f29c1" },
      "us-east-2": { "AMI": "ami-ef4f6e8a" },
      "us-west-1": { "AMI": "ami-5c0a263c" },
      "us-west-2": { "AMI": "ami-29fbec50" },
      "ca-central-1": { "AMI": "ami-e2a91686" },
      "eu-central-1": { "AMI": "ami-5f2f8930" },
      "eu-west-1": { "AMI": "ami-10b25769" },
      "eu-west-2": { "AMI": "ami-800315e4" },
      "ap-southeast-1": { "AMI": "ami-a048c6c3" },
      "ap-southeast-2": { "AMI": "ami-ba796ad9" },
      "ap-south-1": { "AMI": "ami-83700eec" },
      "ap-northeast-1": { "AMI": "ami-910312f6" },
      "ap-northeast-2": { "AMI": "ami-553ae53b" },
      "sa-east-1": { "AMI": "ami-6b107a07" }
    }
  },
  "Resources": {
    "CouchbaseAutoScalingGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "AvailabilityZones": { "Fn::GetAZs": "" },
        "LaunchConfigurationName": { "Ref": "CouchbaseLaunchConfiguration" },
        "MinSize": 1,
        "MaxSize": 100,
        "DesiredCapacity": { "Ref": "InstanceCount" }
      }
    },
    "CouchbaseLaunchConfiguration": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "ImageId": { "Fn::FindInMap": [ "CouchbaseServerAMI", { "Ref": "AWS::Region" }, "AMI" ] },
        "InstanceType": { "Ref": "InstanceType" },
        "SecurityGroups": [ { "Ref": "CouchbaseSecurityGroup" } ],
        "KeyName": { "Ref": "KeyName" },
        "EbsOptimized": true,
        "IamInstanceProfile": { "Ref": "CouchbaseInstanceProfile" },
        "BlockDeviceMappings":
        [
          {
            "DeviceName" : "/dev/sdk",
            "Ebs" : {
              "VolumeSize": { "Ref": "DiskSize" },
              "VolumeType": "gp2"
            }
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [ "",
              [
"#!/bin/bash\n",
"echo 'Running startup script...'\n",
"adminUsername=", { "Ref": "Username" }, "\n",
"adminPassword=", { "Ref": "Password" }, "\n",
"\n",
"#######################################################\n",
"############ Turn Off Transparent Hugepages ###########\n",
"#######################################################\n",
"echo \"Turning off transparent hugepages...\"\n",
"# Please look at http://bit.ly/1ZAcLjD as for how to PERMANENTLY alter this setting.\n",
"\n",
"echo \"#!/bin/bash\n",
"### BEGIN INIT INFO\n",
"# Provides:          disable-thp\n",
"# Required-Start:    $local_fs\n",
"# Required-Stop:\n",
"# X-Start-Before:    couchbase-server\n",
"# Default-Start:     2 3 4 5\n",
"# Default-Stop:      0 1 6\n",
"# Short-Description: Disable THP\n",
"# Description:       disables Transparent Huge Pages (THP) on boot\n",
"### END INIT INFO\n",
"\n",
"echo 'never' > /sys/kernel/mm/transparent_hugepage/enabled\n",
"echo 'never' > /sys/kernel/mm/transparent_hugepage/defrag\n",
"\" > /etc/init.d/disable-thp\n",
"chmod 755 /etc/init.d/disable-thp\n",
"service disable-thp start\n",
"chkconfig disable-thp on\n",
"\n",
"#######################################################\n",
"################# Set Swappiness to 0 #################\n",
"#######################################################\n",
"echo \"Setting swappiness to 0...\"\n",
"# Please look at http://bit.ly/1k2CtNn as for how to PERMANENTLY alter this setting.\n",
"\n",
"sysctl vm.swappiness=0\n",
"echo \"\n",
"# Required for Couchbase\n",
"vm.swappiness = 0\" >> /etc/sysctl.conf\n",
"\n",
"#######################################################\n",
"##################### Format Disk #####################\n",
"#######################################################\n",
"echo \"Formatting disk...\"\n",
"\n",
"DEVICE=/dev/sdk\n",
"MOUNTPOINT=/mnt/datadisk\n",
"\n",
"echo \"Creating the filesystem.\"\n",
"mkfs -t ext4 ${DEVICE}\n",
"\n",
"echo \"Updating fstab\"\n",
"LINE=\"${DEVICE}\t${MOUNTPOINT}\text4\tdefaults,nofail\t0\t2\"\n",
"echo -e ${LINE} >> /etc/fstab\n",
"\n",
"echo \"Mounting the disk\"\n",
"mkdir $MOUNTPOINT\n",
"mount -a\n",
"\n",
"echo \"Changing permissions\"\n",
"chown couchbase $MOUNTPOINT\n",
"chgrp couchbase $MOUNTPOINT\n",
"\n",
"#######################################################\n",
"################# Configure Couchbase #################\n",
"#######################################################\n",
"echo \"Configuring Couchbase...\"\n",
"\n",
"# This is all to figure out what our rally point is.  There might be a much better way to do this.\n",
"yum -y install jq\n",
"\n",
"region=$(curl -s http://169.254.169.254/latest/dynamic/instance-identity/document \\\n",
"  | jq '.region'  \\\n",
"  | sed 's/^\"\\(.*\\)\"$/\\1/' )\n",
"\n",
"instanceID=$(curl -s http://169.254.169.254/latest/dynamic/instance-identity/document \\\n",
"  | jq '.instanceId' \\\n",
"  | sed 's/^\"\\(.*\\)\"$/\\1/' )\n",
"\n",
"autoscalingGroup=$(aws ec2 describe-instances \\\n",
"  --region ${region} \\\n",
"  --instance-ids ${instanceID} \\\n",
"  | jq '.Reservations[0]|.Instances[0]|.Tags[] | select( .Key == \"aws:autoscaling:groupName\") | .Value' \\\n",
"  | sed 's/^\"\\(.*\\)\"$/\\1/' )\n",
"\n",
"autoscalingGroupInstanceIDs=$(aws autoscaling describe-auto-scaling-groups \\\n",
"  --region ${region} \\\n",
"  --query 'AutoScalingGroups[*].Instances[*].InstanceId' \\\n",
"  --auto-scaling-group-name ${autoscalingGroup} \\\n",
"  | grep \"i-\" | sed 's/ //g' | sed 's/\"//g' |sed 's/,//g' | sort)\n",
"\n",
"rallyInstanceID=`echo ${autoscalingGroupInstanceIDs} | cut -d \" \" -f1`\n",
"\n",
"rallyPublicDNS=$(aws ec2 describe-instances \\\n",
"    --region ${region} \\\n",
"    --query  'Reservations[0].Instances[0].NetworkInterfaces[0].Association.PublicDnsName' \\\n",
"    --instance-ids ${rallyInstanceID} \\\n",
"    --output text)\n",
"\n",
"nodePublicDNS=`curl http://169.254.169.254/latest/meta-data/public-hostname`\n",
"\n",
"echo \"Using the settings:\"\n",
"echo adminUsername \\'$adminUsername\\'\n",
"echo adminPassword \\'$adminPassword\\'\n",
"echo rallyPublicDNS \\'$rallyPublicDNS\\'\n",
"echo nodePublicDNS \\'$nodePublicDNS\\'\n",
"\n",
"cd /opt/couchbase/bin/\n",
"\n",
"echo \"Running couchbase-cli node-init\"\n",
"output=\"\"\n",
"while [[ ! $output =~ \"SUCCESS\" ]]\n",
"do\n",
"  output=`./couchbase-cli node-init \\\n",
"    --cluster=$nodePublicDNS \\\n",
"    --node-init-hostname=$nodePublicDNS \\\n",
"    --node-init-data-path=/mnt/datadisk/data \\\n",
"    --node-init-index-path=/mnt/datadisk/index \\\n",
"    --user=$adminUsername \\\n",
"    --pass=$adminPassword`\n",
"  echo node-init output \\'$output\\'\n",
"  sleep 10\n",
"done\n",
"\n",
"if [[ $rallyPublicDNS == $nodePublicDNS ]]\n",
"then\n",
"  totalRAM=$(grep MemTotal /proc/meminfo | awk '{print $2}')\n",
"  dataRAM=$((50 * $totalRAM / 100000))\n",
"  indexRAM=$((25 * $totalRAM / 100000))\n",
"\n",
"  echo \"Running couchbase-cli cluster-init\"\n",
"  ./couchbase-cli cluster-init \\\n",
"    --cluster=$nodePublicDNS \\\n",
"    --cluster-username=$adminUsername \\\n",
"    --cluster-password=$adminPassword \\\n",
"    --cluster-ramsize=$dataRAM \\\n",
"    --cluster-index-ramsize=$indexRAM \\\n",
"    --services=data,index,query,fts\n",
"else\n",
"  echo \"Running couchbase-cli server-add\"\n",
"  output=\"\"\n",
"  while [[ $output != \"Server $nodePublicDNS:8091 added\" && ! $output =~ \"Node is already part of cluster.\" ]]\n",
"  do\n",
"    output=`./couchbase-cli server-add \\\n",
"      --cluster=$rallyPublicDNS \\\n",
"      --user=$adminUsername \\\n",
"      --pass=$adminPassword \\\n",
"      --server-add=$nodePublicDNS \\\n",
"      --server-add-username=$adminUsername \\\n",
"      --server-add-password=$adminPassword \\\n",
"      --services=data,index,query,fts`\n",
"    echo server-add output \\'$output\\'\n",
"    sleep 10\n",
"  done\n",
"\n",
"  echo \"Running couchbase-cli rebalance\"\n",
"  output=\"\"\n",
"  while [[ ! $output =~ \"SUCCESS\" ]]\n",
"  do\n",
"    output=`./couchbase-cli rebalance \\\n",
"    --cluster=$rallyPublicDNS \\\n",
"    --user=$adminUsername \\\n",
"    --pass=$adminPassword`\n",
"    echo rebalance output \\'$output\\'\n",
"    sleep 10\n",
"  done\n",
"\n",
"fi\n"
              ]
            ]
          }
        }
      }
    },
    "CouchbaseInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {"Roles": [{"Ref": "CouchbaseRole"}]}
    },
    "CouchbaseRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {"Service": ["ec2.amazonaws.com"]},
              "Action": ["sts:AssumeRole"]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "CouchbasePolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "ec2:DescribeInstances",
                    "autoscaling:DescribeAutoScalingGroups"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "CouchbaseSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription" : "Enable SSH and Couchbase Ports",
        "SecurityGroupIngress": [
          { "IpProtocol": "tcp", "FromPort": 22, "ToPort": 22, "CidrIp": { "Ref": "SSHCIDR" } },
          { "IpProtocol": "tcp", "FromPort": 4369, "ToPort": 4369, "CidrIp": "0.0.0.0/0" },
          { "IpProtocol": "tcp", "FromPort": 4984, "ToPort": 4985, "CidrIp": "0.0.0.0/0" },
          { "IpProtocol": "tcp", "FromPort": 8091, "ToPort": 8094, "CidrIp": "0.0.0.0/0" },
          { "IpProtocol": "tcp", "FromPort": 9100, "ToPort": 9105, "CidrIp": "0.0.0.0/0" },
          { "IpProtocol": "tcp", "FromPort": 9998, "ToPort": 9999, "CidrIp": "0.0.0.0/0" },
          { "IpProtocol": "tcp", "FromPort": 11207, "ToPort": 11215, "CidrIp": "0.0.0.0/0" },
          { "IpProtocol": "tcp", "FromPort": 18091, "ToPort": 18093, "CidrIp": "0.0.0.0/0" },
          { "IpProtocol": "tcp", "FromPort": 21100, "ToPort": 21299, "CidrIp": "0.0.0.0/0" }
          { "IpProtocol": "tcp", "FromPort": 8091, "ToPort": 8091, "CidrIp": "0.0.0.0/0" }
        ]
      }
    }
  }
}
